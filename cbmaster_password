#!/usr/bin/python
# -*- python -*-

import subprocess
import os
import sys
import platform
import re
import random
import string
import getpass

USAGE = """usage: %prog [options]"""

def run_process(name, args):
    if platform.system() == 'Windows':
        name = name + ".exe"

    args.insert(0, name)
    p = subprocess.Popen(args, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    output = p.stdout.read()
    error = p.stderr.read()
    p.wait()
    rc = p.returncode
    return output, error

def remote_shell_name():
    tmp = ''.join(random.choice(string.ascii_letters) for i in xrange(20))
    return 'cb-%s@127.0.0.1' % tmp

def get_babysitter_init_path(options):
    if options.init != "":
        return options.init

    variants = [os.path.abspath(os.path.join(options.root, "var", "lib", "couchbase", "babysitter_init")),
                "/opt/couchbase/var/lib/couchbase/babysitter_init",
                os.path.expanduser("~/Library/Application Support/Couchbase/var/lib/couchbase/babysitter_init")]
    for path in variants:
        if os.path.isfile(path):
            return path

    print("File babysitter_init is not found under the specified root")
    sys.exit(1)

def prompt_for_password(node, cookie):
    password = getpass.getpass("\nPlease enter master password:")
    password = "\"" + password.replace("\\", "\\\\").replace("\"", "\\\"") + "\""

    instr = "Res = rpc:call('" + node + "', encryption_service, set_password, [" \
            + password + "]), io:format(\"~p~n\", [Res])."
    args = ["-noinput", "-name", remote_shell_name(), "-setcookie", cookie, "-eval", \
            instr, "-run", "init", "stop"]

    res, error = run_process("erl", args)
    res = res.strip(' \t\n\r')

    if res == "ok":
        print "Password accepted. Node started booting."
    elif res == "{badrpc,nodedown}":
        print "Either the node is down or password was already supplied"
    else:
        print "Incorrect password. Node shuts down."

def main():
    from optparse import OptionParser

    mydir = os.path.dirname(sys.argv[0])
    path = [mydir, os.environ['PATH']]
    if os.name == 'posix':
        os.environ['PATH'] = ':'.join(path)
    else:
        os.environ['PATH'] = ';'.join(path)

    parser = OptionParser(usage=USAGE)

    parser.add_option("-r", dest="root",
                      help="root directory - defaults to %s" % (mydir + "/.."),
                      default=os.path.abspath(os.path.join(mydir, "..")))
    parser.add_option("-i", dest="init",
                      help="babysitter init file - defaults to <root>/var/lib/couchbase/babysitter_init",
                      default="")
    options, args = parser.parse_args()
    init_path = get_babysitter_init_path(options)

    data = None
    try:
        with open(init_path, 'r') as f:
            data = f.read()
    except:
        print("Cannot read file " + init_path + ". Node might be not started.")
        sys.exit(1)

    words = data.split(":")
    if len(words) != 2:
        print("Corrupted babysitter_init file.")
        sys.exit(1)

    node_name = words[0] + "@127.0.0.1"
    prompt_for_password(node_name, words[1])

if __name__ == '__main__':
    main()
